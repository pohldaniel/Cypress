"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugCdpConnection = void 0;
const tslib_1 = require("tslib");
const debug_1 = tslib_1.__importDefault(require("debug"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const debugCdpConnection = (namespace, cri) => {
    var _a, _b, _c, _d, _e;
    // debug using cypress-verbose:server:browsers:cri-client:send:*
    const debugVerboseSend = (0, debug_1.default)(`${namespace}:send:[-->]`);
    // debug using cypress-verbose:server:browsers:cri-client:recv:*
    const debugVerboseReceive = (0, debug_1.default)(`${namespace}:recv:[<--]`);
    // debug using cypress-verbose:server:browsers:cri-client:err:*
    const debugVerboseLifecycle = (0, debug_1.default)(`${namespace}:ws`);
    if (debugVerboseReceive.enabled) {
        (_a = cri._ws) === null || _a === void 0 ? void 0 : _a.prependListener('message', (data) => {
            data = lodash_1.default
                .chain(JSON.parse(data))
                .tap((data) => {
                ([
                    'params.data', // screencast frame data
                    'result.data', // screenshot data
                ]).forEach((truncatablePath) => {
                    const str = lodash_1.default.get(data, truncatablePath);
                    if (!lodash_1.default.isString(str)) {
                        return;
                    }
                    lodash_1.default.set(data, truncatablePath, lodash_1.default.truncate(str, {
                        length: 100,
                        omission: `... [truncated string of total bytes: ${str.length}]`,
                    }));
                });
                return data;
            })
                .value();
            debugVerboseReceive('received CDP message %o', data);
        });
    }
    if (debugVerboseSend.enabled) {
        if (cri._ws) {
            const send = (_b = cri._ws) === null || _b === void 0 ? void 0 : _b.send;
            cri._ws.send = (data, callback) => {
                debugVerboseSend('sending CDP command %o', JSON.parse(data));
                try {
                    return send.call(cri._ws, data, callback);
                }
                catch (e) {
                    debugVerboseSend('Error sending CDP command %o %O', JSON.parse(data), e);
                    throw e;
                }
            };
        }
    }
    if (debugVerboseLifecycle.enabled) {
        (_c = cri._ws) === null || _c === void 0 ? void 0 : _c.addEventListener('open', (event) => {
            debugVerboseLifecycle(`[OPEN] %o`, event);
        });
        (_d = cri._ws) === null || _d === void 0 ? void 0 : _d.addEventListener('close', (event) => {
            debugVerboseLifecycle(`[CLOSE] %o`, event);
        });
        (_e = cri._ws) === null || _e === void 0 ? void 0 : _e.addEventListener('error', (event) => {
            debugVerboseLifecycle(`[ERROR] %o`, event);
        });
    }
};
exports.debugCdpConnection = debugCdpConnection;
