"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint-disable no-console */
const debug_1 = tslib_1.__importDefault(require("debug"));
const launcher_1 = require("../../../launcher");
const pluralize_1 = tslib_1.__importDefault(require("pluralize"));
const common_tags_1 = require("common-tags");
const utils_1 = tslib_1.__importDefault(require("../browsers/utils"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs_1 = require("../util/fs");
const debug = (0, debug_1.default)('cypress:server:info');
// color for numbers and short values
const n = chalk_1.default.green;
// color for paths
const p = chalk_1.default.cyan;
// color for accents and examples
const a = chalk_1.default.yellow;
// urls
const link = chalk_1.default.blue.underline;
/**
 * If the list has at least 1 item, picks a random item
 * and returns it AND the remaining items.
 */
const pickRandomItem = (list) => {
    if (!list.length) {
        return {
            item: null,
            remaining: list,
        };
    }
    const item = lodash_1.default.sample(list);
    const remaining = lodash_1.default.without(list, item);
    return {
        item, remaining,
    };
};
// Usually the full browser name to pass via --browser
// is <name>:<channel>. If the channel is stable, you
// can just do "--browser <name>"
const formBrowserName = (browser) => {
    if (browser.channel === 'stable') {
        return browser.name;
    }
    return `${browser.name}:${browser.channel}`;
};
// for each browser computes the profile folder
// and checks if the folder exists. If exists,
// adds it to the browser object as a property
const addProfilePath = async (browsers = []) => {
    for (const browser of browsers) {
        const profilePath = utils_1.default.getBrowserPath(browser);
        debug('checking profile path %s for browser %s:%s', profilePath, browser.name, browser.channel);
        try {
            const profileExists = await fs_1.fs.statAsync(profilePath);
            if (profileExists && profileExists.isDirectory()) {
                debug('profile folder exists %s', profilePath);
                browser.profilePath = profilePath;
            }
        }
        catch (e) {
            debug('problem checking profile folder %s %s', profilePath, e.message);
        }
    }
    return browsers;
};
const print = (browsers = []) => {
    console.log('Displaying Cypress info...');
    console.log('');
    if (browsers.length) {
        console.log('Detected %s %s installed:', n(`${browsers.length}`), (0, pluralize_1.default)('browser', browsers.length));
    }
    else {
        console.log('Detected no known browsers installed');
    }
    console.log('');
    const sortedByNameAndMajorVersion = lodash_1.default.sortBy(browsers, ['name', 'majorVersion']);
    sortedByNameAndMajorVersion.forEach((browser, k) => {
        const text = (0, common_tags_1.stripIndent) `
      ${k + 1}. ${a(browser.displayName)}
        - Name: ${browser.name}
        - Channel: ${browser.channel}
        - Version: ${n(browser.version)}
        - Executable: ${p(browser.path)}
        ${browser.profilePath ? `- Profile: ${browser.profilePath}` : ''}
    `;
        console.log(text);
        console.log('');
    });
    // randomly a few detected browsers to use as examples
    if (browsers.length) {
        const highlightedBrowser = a('--browser');
        console.log('Note: to run these browsers, pass <name>:<channel> to the \'%s\' field', highlightedBrowser);
        console.log('');
        const firstDraw = pickRandomItem(browsers);
        if (firstDraw.item) {
            console.log('Examples:');
            console.log(a(`- cypress run --browser ${formBrowserName(firstDraw.item)}`));
            const secondDraw = pickRandomItem(firstDraw.remaining);
            if (secondDraw.item) {
                console.log(a(`- cypress run --browser ${formBrowserName(secondDraw.item)}`));
            }
        }
        console.log('');
        console.log('Learn More: %s', link('https://on.cypress.io/launching-browsers'));
    }
};
const info = () => {
    return (0, launcher_1.detect)()
        .then(addProfilePath)
        .then(print);
};
module.exports = info;
