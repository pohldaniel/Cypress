"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.telemetryManager = exports.TELEMETRY_GROUPS = exports.TELEMETRY_GROUP_NAMES = exports.MEASURE_NAMES = exports.MARK_NAMES = void 0;
const perf_hooks_1 = require("perf_hooks");
const bundle_lifecycle_1 = require("./constants/bundle-lifecycle");
const initialization_1 = require("./constants/initialization");
exports.MARK_NAMES = Object.freeze({
    ...bundle_lifecycle_1.BUNDLE_LIFECYCLE_MARK_NAMES,
    ...initialization_1.INITIALIZATION_MARK_NAMES,
});
exports.MEASURE_NAMES = Object.freeze({
    ...bundle_lifecycle_1.BUNDLE_LIFECYCLE_MEASURE_NAMES,
    ...initialization_1.INITIALIZATION_MEASURE_NAMES,
});
const MEASURES = Object.freeze({
    ...bundle_lifecycle_1.BUNDLE_LIFECYCLE_MEASURES,
    ...initialization_1.INITIALIZATION_MEASURES,
});
exports.TELEMETRY_GROUP_NAMES = Object.freeze({
    ...bundle_lifecycle_1.BUNDLE_LIFECYCLE_TELEMETRY_GROUP_NAMES,
    ...initialization_1.INITIALIZATION_TELEMETRY_GROUP_NAMES,
});
exports.TELEMETRY_GROUPS = Object.freeze({
    ...bundle_lifecycle_1.BUNDLE_LIFECYCLE_TELEMETRY_GROUPS,
    ...initialization_1.INITIALIZATION_TELEMETRY_GROUPS,
});
class TelemetryManager {
    constructor() {
        this.groupMetadata = {};
    }
    static getInstance() {
        if (!TelemetryManager.instance) {
            TelemetryManager.instance = new TelemetryManager();
        }
        return TelemetryManager.instance;
    }
    mark(name) {
        perf_hooks_1.performance.mark(name);
    }
    getMeasure(measureName) {
        var _a;
        const [startMark, endMark] = MEASURES[measureName];
        try {
            const measure = perf_hooks_1.performance.measure(measureName, startMark, endMark);
            return (_a = measure === null || measure === void 0 ? void 0 : measure.duration) !== null && _a !== void 0 ? _a : -1;
        }
        catch (error) {
            return -1;
        }
    }
    getMeasures(names, clear = false) {
        const result = {};
        for (const name of names) {
            result[name] = this.getMeasure(name);
        }
        if (clear) {
            this.clearMeasures(names);
        }
        return result;
    }
    clearMeasureGroup(groupName) {
        const measures = exports.TELEMETRY_GROUPS[groupName];
        this.clearMeasures(measures);
    }
    clearMeasures(names) {
        for (const name of names) {
            perf_hooks_1.performance.clearMeasures(name);
            perf_hooks_1.performance.clearMarks(MEASURES[name][0]);
            perf_hooks_1.performance.clearMarks(MEASURES[name][1]);
        }
    }
    addGroupMetadata(groupName, metadata) {
        this.groupMetadata[groupName] = this.groupMetadata[groupName] || {};
        this.groupMetadata[groupName] = {
            ...this.groupMetadata[groupName],
            ...metadata,
        };
    }
    reset() {
        perf_hooks_1.performance.clearMarks();
        perf_hooks_1.performance.clearMeasures();
        this.groupMetadata = {};
    }
}
exports.telemetryManager = TelemetryManager.getInstance();
