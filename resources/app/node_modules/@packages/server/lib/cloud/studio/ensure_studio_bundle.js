"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureStudioBundle = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = require("fs-extra");
const tar_1 = tslib_1.__importDefault(require("tar"));
const get_studio_bundle_1 = require("../api/studio/get_studio_bundle");
const path_1 = tslib_1.__importDefault(require("path"));
const DOWNLOAD_TIMEOUT = 30000;
/**
 * Ensures that the studio bundle is downloaded and extracted into the given path
 * @param options - The options for the ensure studio bundle operation
 * @param options.studioUrl - The URL of the studio bundle
 * @param options.projectId - The project ID of the studio bundle
 * @param options.studioPath - The path to extract the studio bundle to
 * @param options.downloadTimeoutMs - The timeout for the download operation
 */
const ensureStudioBundle = async ({ studioUrl, projectId, studioPath, downloadTimeoutMs = DOWNLOAD_TIMEOUT, }) => {
    const bundlePath = path_1.default.join(studioPath, 'bundle.tar');
    // First remove studioPath to ensure we have a clean slate
    await (0, fs_extra_1.remove)(studioPath);
    await (0, fs_extra_1.ensureDir)(studioPath);
    let timeoutId;
    await Promise.race([
        (0, get_studio_bundle_1.getStudioBundle)({
            studioUrl,
            projectId,
            bundlePath,
        }),
        new Promise((_, reject) => {
            timeoutId = setTimeout(() => {
                reject(new Error('Studio bundle download timed out'));
            }, downloadTimeoutMs);
        }),
    ]).finally(() => {
        clearTimeout(timeoutId);
    });
    await tar_1.default.extract({
        file: bundlePath,
        cwd: studioPath,
    });
};
exports.ensureStudioBundle = ensureStudioBundle;
