"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportTelemetry = exports.initializeTelemetryReporter = exports.TelemetryReporter = void 0;
const tslib_1 = require("tslib");
const debug_1 = tslib_1.__importDefault(require("debug"));
const TelemetryManager_1 = require("./TelemetryManager");
const cloud_request_1 = require("../../api/cloud_request");
const get_cloud_metadata_1 = require("../../get_cloud_metadata");
const debug = (0, debug_1.default)('cypress:server:cloud:studio:telemetry:reporter');
class TelemetryReporter {
    constructor({ projectSlug, cloudDataSource, }) {
        this.projectSlug = projectSlug;
        this.cloudDataSource = cloudDataSource;
    }
    static initialize(options) {
        if (TelemetryReporter.instance) {
            // initialize gets called multiple times (e.g. if you switch between projects)
            // we need to reset the telemetry manager to avoid accumulating measures
            TelemetryManager_1.telemetryManager.reset();
        }
        TelemetryReporter.instance = new TelemetryReporter(options);
    }
    static getInstance() {
        if (!TelemetryReporter.instance) {
            throw new Error('TelemetryReporter not initialized');
        }
        return TelemetryReporter.instance;
    }
    reportTelemetry(telemetryGroupName, metadata) {
        this._reportTelemetry(telemetryGroupName, metadata).catch((e) => {
            debug('Error reporting telemetry to cloud: %o, original telemetry: %s', e, telemetryGroupName);
        });
    }
    async _reportTelemetry(telemetryGroupName, metadata) {
        debug('Reporting telemetry for group: %s', telemetryGroupName);
        try {
            const groupMeasures = [...TelemetryManager_1.TELEMETRY_GROUPS[telemetryGroupName]];
            const measures = TelemetryManager_1.telemetryManager.getMeasures(groupMeasures);
            const payload = {
                projectSlug: this.projectSlug,
                telemetryGroupName,
                measures,
                metadata,
            };
            const { cloudUrl, cloudHeaders } = await (0, get_cloud_metadata_1.getCloudMetadata)(this.cloudDataSource);
            await cloud_request_1.CloudRequest.post(`${cloudUrl}/studio/telemetry`, payload, {
                headers: {
                    'Content-Type': 'application/json',
                    ...cloudHeaders,
                },
            });
        }
        catch (e) {
            debug('Error reporting telemetry to cloud: %o, original telemetry: %s', e, telemetryGroupName);
        }
    }
}
exports.TelemetryReporter = TelemetryReporter;
const initializeTelemetryReporter = (options) => {
    TelemetryReporter.initialize(options);
};
exports.initializeTelemetryReporter = initializeTelemetryReporter;
const reportTelemetry = (telemetryGroupName, metadata) => {
    TelemetryReporter.getInstance().reportTelemetry(telemetryGroupName, metadata);
    TelemetryManager_1.telemetryManager.clearMeasureGroup(telemetryGroupName);
};
exports.reportTelemetry = reportTelemetry;
