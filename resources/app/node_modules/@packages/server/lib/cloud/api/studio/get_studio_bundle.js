"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStudioBundle = void 0;
const tslib_1 = require("tslib");
const async_retry_1 = require("../../../util/async_retry");
const is_retryable_error_1 = require("../../network/is_retryable_error");
const cross_fetch_1 = tslib_1.__importDefault(require("cross-fetch"));
const os_1 = tslib_1.__importDefault(require("os"));
const network_1 = require("../../../../../network");
const constants_1 = require("../../constants");
const fs_1 = require("fs");
const encryption_1 = require("../../encryption");
const pkg = require('../../../../../root');
const _delay = (0, async_retry_1.linearDelay)(500);
const getStudioBundle = async ({ studioUrl, projectId, bundlePath }) => {
    let responseSignature = null;
    await ((0, async_retry_1.asyncRetry)(async () => {
        const response = await (0, cross_fetch_1.default)(studioUrl, {
            // @ts-expect-error - this is supported
            agent: network_1.agent,
            method: 'GET',
            headers: {
                'x-route-version': '1',
                'x-cypress-signature': constants_1.PUBLIC_KEY_VERSION,
                'x-os-name': os_1.default.platform(),
                'x-cypress-version': pkg.version,
            },
            encrypt: 'signed',
        });
        if (!response.ok) {
            throw new Error(`Failed to download studio bundle: ${response.statusText}`);
        }
        responseSignature = response.headers.get('x-cypress-signature');
        await new Promise((resolve, reject) => {
            var _a;
            const writeStream = (0, fs_1.createWriteStream)(bundlePath);
            writeStream.on('error', reject);
            writeStream.on('finish', () => {
                resolve();
            });
            // @ts-expect-error - this is supported
            (_a = response.body) === null || _a === void 0 ? void 0 : _a.pipe(writeStream);
        });
    }, {
        maxAttempts: 3,
        retryDelay: _delay,
        shouldRetry: is_retryable_error_1.isRetryableError,
    }))();
    if (!responseSignature) {
        throw new Error('Unable to get studio signature');
    }
    const verified = await (0, encryption_1.verifySignatureFromFile)(bundlePath, responseSignature);
    if (!verified) {
        throw new Error('Unable to verify studio signature');
    }
};
exports.getStudioBundle = getStudioBundle;
