"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postStudioSession = void 0;
const tslib_1 = require("tslib");
const async_retry_1 = require("../../../util/async_retry");
const is_retryable_error_1 = require("../../network/is_retryable_error");
const cross_fetch_1 = tslib_1.__importDefault(require("cross-fetch"));
const os_1 = tslib_1.__importDefault(require("os"));
const network_1 = require("../../../../../network");
const pkg = require('../../../../../root');
const routes = require('../../routes');
const _delay = (0, async_retry_1.linearDelay)(500);
const postStudioSession = async ({ projectId }) => {
    return await ((0, async_retry_1.asyncRetry)(async () => {
        const response = await (0, cross_fetch_1.default)(routes.apiRoutes.studioSession(), {
            // @ts-expect-error - this is supported
            agent: network_1.agent,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'x-os-name': os_1.default.platform(),
                'x-cypress-version': pkg.version,
            },
            body: JSON.stringify({ projectSlug: projectId, studioMountVersion: 1, protocolMountVersion: 2 }),
        });
        if (!response.ok) {
            throw new Error(`Failed to create studio session: ${response.statusText}`);
        }
        const data = await response.json();
        return {
            studioUrl: data.studioUrl,
            protocolUrl: data.protocolUrl,
        };
    }, {
        maxAttempts: 3,
        retryDelay: _delay,
        shouldRetry: is_retryable_error_1.isRetryableError,
    }))();
};
exports.postStudioSession = postStudioSession;
