"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportStudioError = void 0;
const tslib_1 = require("tslib");
const debug_1 = tslib_1.__importDefault(require("debug"));
const strip_path_1 = require("../../strip_path");
const debug = (0, debug_1.default)('cypress:server:cloud:api:studio:report_studio_errors');
function reportStudioError({ cloudApi, studioHash, projectSlug, error, studioMethod, studioMethodArgs, }) {
    var _a, _b, _c;
    debug('Error reported:', error);
    // When developing locally, do not send to Sentry, but instead log to console.
    if (process.env.CYPRESS_LOCAL_STUDIO_PATH ||
        process.env.NODE_ENV === 'development' ||
        process.env.CYPRESS_INTERNAL_E2E_TESTING_SELF) {
        // eslint-disable-next-line no-console
        console.error(`Error in ${studioMethod}:`, error);
        return;
    }
    let errorObject;
    if (!(error instanceof Error)) {
        errorObject = new Error(String(error));
    }
    else {
        errorObject = error;
    }
    let studioMethodArgsString;
    if (studioMethodArgs) {
        try {
            studioMethodArgsString = JSON.stringify({
                args: studioMethodArgs,
            });
        }
        catch (e) {
            studioMethodArgsString = `Unknown args: ${e}`;
        }
    }
    try {
        const payload = {
            studioHash,
            projectSlug,
            errors: [{
                    name: (0, strip_path_1.stripPath)((_a = errorObject.name) !== null && _a !== void 0 ? _a : `Unknown name`),
                    stack: (0, strip_path_1.stripPath)((_b = errorObject.stack) !== null && _b !== void 0 ? _b : `Unknown stack`),
                    message: (0, strip_path_1.stripPath)((_c = errorObject.message) !== null && _c !== void 0 ? _c : `Unknown message`),
                    studioMethod,
                    studioMethodArgs: studioMethodArgsString,
                }],
        };
        cloudApi.CloudRequest.post(`${cloudApi.cloudUrl}/studio/errors`, payload, {
            headers: {
                'Content-Type': 'application/json',
                ...cloudApi.cloudHeaders,
            },
        }).catch((e) => {
            debug(`Error calling StudioManager.reportError: %o, original error %o`, e, error);
        });
    }
    catch (e) {
        debug(`Error calling StudioManager.reportError: %o, original error %o`, e, error);
    }
}
exports.reportStudioError = reportStudioError;
