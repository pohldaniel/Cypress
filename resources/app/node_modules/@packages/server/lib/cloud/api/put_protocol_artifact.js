"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.putProtocolArtifact = exports._delay = void 0;
const tslib_1 = require("tslib");
const promises_1 = tslib_1.__importDefault(require("fs/promises"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const debug_1 = tslib_1.__importDefault(require("debug"));
const stream_activity_monitor_1 = require("../upload/stream_activity_monitor");
const async_retry_1 = require("../../util/async_retry");
const put_fetch_1 = require("../network/put_fetch");
const is_retryable_error_1 = require("../network/is_retryable_error");
const debug = (0, debug_1.default)('cypress:server:cloud:api:protocol-artifact');
exports._delay = (0, async_retry_1.linearDelay)(500);
exports.putProtocolArtifact = (0, async_retry_1.asyncRetry)(async (artifactPath, maxFileSize, destinationUrl, uploadMonitorSamplingRate) => {
    debug(`Atttempting to upload Test Replay archive from ${artifactPath} to ${destinationUrl})`);
    const { size } = await promises_1.default.stat(artifactPath);
    if (size > maxFileSize) {
        throw new Error(`Spec recording too large: artifact is ${size} bytes, limit is ${maxFileSize} bytes`);
    }
    const activityMonitor = new stream_activity_monitor_1.StreamActivityMonitor(uploadMonitorSamplingRate);
    const fileStream = fs_1.default.createReadStream(artifactPath);
    const controller = activityMonitor.getController();
    await (0, put_fetch_1.putFetch)(destinationUrl, {
        parse: put_fetch_1.ParseKinds.TEXT,
        headers: {
            'content-length': String(size),
            'content-type': 'application/x-tar',
            'accept': 'application/json',
        },
        // ts thinks this is a web fetch, which only expects ReadableStreams.
        // But, this is a node fetch, which supports ReadStreams.
        // @ts-expect-error
        body: activityMonitor.monitor(fileStream),
        signal: controller.signal,
    });
}, {
    maxAttempts: 3,
    retryDelay: exports._delay,
    shouldRetry: is_retryable_error_1.isRetryableError,
});
