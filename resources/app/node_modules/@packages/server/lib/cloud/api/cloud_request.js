"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRetryableCloudError = exports.CloudRequest = exports.createCloudRequest = void 0;
const tslib_1 = require("tslib");
/**
 * The axios Cloud instance should not be used.
 */
const os_1 = tslib_1.__importDefault(require("os"));
const follow_redirects_1 = tslib_1.__importDefault(require("follow-redirects"));
const axios_1 = tslib_1.__importDefault(require("axios"));
const root_1 = tslib_1.__importDefault(require("../../../../root"));
const agent_1 = tslib_1.__importDefault(require("../../../../network/lib/agent"));
const app_json_1 = tslib_1.__importDefault(require("../../../config/app.json"));
const transform_error_1 = require("./axios_middleware/transform_error");
const logging_1 = require("./axios_middleware/logging");
const encryption_1 = require("./axios_middleware/encryption");
// Allows us to create customized Cloud Request instances w/ different baseURL & encryption configuration
const createCloudRequest = (options = {}) => {
    const cfgKey = process.env.CYPRESS_CONFIG_ENV || process.env.CYPRESS_INTERNAL_ENV || 'development';
    const { baseURL = app_json_1.default[cfgKey].api_url, enableLogging = true, enableErrorTransform = true } = options;
    const instance = axios_1.default.create({
        baseURL,
        httpAgent: agent_1.default,
        httpsAgent: agent_1.default,
        headers: {
            'x-os-name': os_1.default.platform(),
            'x-cypress-version': root_1.default.version,
            'User-Agent': `cypress/${root_1.default.version}`,
            ...options.additionalHeaders,
        },
        transport: {
            // https://github.com/axios/axios/issues/6313#issue-2198831362
            // Tapping into the transport seems the only way to handle this at the moment:
            // https://github.com/axios/axios/blob/a406a93e2d99c3317596f02f3537f5457a2a80fd/lib/adapters/http.js#L438-L450
            request(options, cb) {
                if ((process.env.HTTP_PROXY || process.env.HTTPS_PROXY) && options.headers['Proxy-Authorization']) {
                    delete options.headers['Proxy-Authorization'];
                }
                if (/https:?/.test(options.protocol)) {
                    return follow_redirects_1.default.https.request(options, cb);
                }
                return follow_redirects_1.default.http.request(options, cb);
            },
        },
    });
    (0, encryption_1.installEncryption)(instance);
    if (enableLogging) {
        (0, logging_1.installLogging)(instance);
    }
    if (enableErrorTransform) {
        (0, transform_error_1.installErrorTransform)(instance);
    }
    return instance;
};
exports.createCloudRequest = createCloudRequest;
exports.CloudRequest = (0, exports.createCloudRequest)();
const isRetryableCloudError = (error) => {
    // setting this env via mocha's beforeEach coerces this to a string, even if it's a boolean
    const disabled = process.env.DISABLE_API_RETRIES && process.env.DISABLE_API_RETRIES !== 'false';
    if (disabled) {
        return false;
    }
    const axiosErr = axios_1.default.isAxiosError(error) ? error : undefined;
    if (axiosErr && axiosErr.status) {
        return [408, 429, 500, 502, 503, 504].includes(axiosErr.status);
    }
    return true;
};
exports.isRetryableCloudError = isRetryableCloudError;
