"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Artifact = exports.ArtifactKinds = void 0;
const tslib_1 = require("tslib");
const debug_1 = tslib_1.__importDefault(require("debug"));
const perf_hooks_1 = require("perf_hooks");
const debug = (0, debug_1.default)('cypress:server:cloud:artifact');
const isAggregateError = (err) => {
    return !!err.errors;
};
exports.ArtifactKinds = Object.freeze({
    VIDEO: 'video',
    SCREENSHOTS: 'screenshots',
    PROTOCOL: 'protocol',
});
class Artifact {
    constructor(reportKey, filePath, uploadUrl, fileSize, uploadStrategy) {
        this.reportKey = reportKey;
        this.filePath = filePath;
        this.uploadUrl = uploadUrl;
        this.fileSize = fileSize;
        this.uploadStrategy = uploadStrategy;
    }
    async upload() {
        const startTime = perf_hooks_1.performance.now();
        this.debug('upload starting');
        try {
            const response = await this.uploadStrategy(this.filePath, this.uploadUrl, this.fileSize);
            this.debug('upload succeeded: %O', response);
            return this.composeSuccessResult(response !== null && response !== void 0 ? response : {}, perf_hooks_1.performance.now() - startTime);
        }
        catch (e) {
            this.debug('upload failed: %O', e);
            return this.composeFailureResult(e, perf_hooks_1.performance.now() - startTime);
        }
    }
    debug(formatter = '', ...args) {
        if (!debug.enabled)
            return;
        debug(`%s: %s -> %s (%dB) ${formatter}`, this.reportKey, this.filePath, this.uploadUrl, this.fileSize, ...args);
    }
    commonResultFields() {
        return {
            key: this.reportKey,
            url: this.uploadUrl,
            pathToFile: this.filePath,
            fileSize: this.fileSize,
        };
    }
    composeSuccessResult(response, uploadDuration) {
        return {
            ...response,
            ...this.commonResultFields(),
            success: true,
            uploadDuration,
        };
    }
    composeFailureResult(err, uploadDuration) {
        const errorReport = isAggregateError(err) ? {
            error: err.errors[err.errors.length - 1].message,
            errorStack: err.errors[err.errors.length - 1].stack,
            allErrors: err.errors,
        } : {
            error: err.message,
            errorStack: err.stack,
        };
        return {
            ...errorReport,
            ...this.commonResultFields(),
            success: false,
            uploadDuration,
            originalError: err,
        };
    }
}
exports.Artifact = Artifact;
