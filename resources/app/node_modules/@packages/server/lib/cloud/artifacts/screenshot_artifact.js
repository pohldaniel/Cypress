"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createScreenshotArtifactBatch = void 0;
const tslib_1 = require("tslib");
const promises_1 = tslib_1.__importDefault(require("fs/promises"));
const debug_1 = tslib_1.__importDefault(require("debug"));
const artifact_1 = require("./artifact");
const file_upload_strategy_1 = require("./file_upload_strategy");
const debug = (0, debug_1.default)('cypress:server:cloud:artifacts:screenshot');
const createScreenshotArtifact = async (filePath, uploadUrl) => {
    try {
        const { size } = await promises_1.default.stat(filePath);
        return new artifact_1.Artifact(artifact_1.ArtifactKinds.SCREENSHOTS, filePath, uploadUrl, size, file_upload_strategy_1.fileUploadStrategy);
    }
    catch (e) {
        debug('Error creating screenshot artifact: %O', e);
        return;
    }
};
const createScreenshotArtifactBatch = (screenshotUploadUrls, screenshotFiles) => {
    const correlatedPaths = screenshotUploadUrls.map(({ screenshotId, uploadUrl }) => {
        var _a;
        const correlatedFilePath = (_a = screenshotFiles.find((pathPair) => {
            return pathPair.screenshotId === screenshotId;
        })) === null || _a === void 0 ? void 0 : _a.path;
        return correlatedFilePath ? {
            filePath: correlatedFilePath,
            uploadUrl,
        } : undefined;
    }).filter((pair) => {
        return !!pair;
    });
    return Promise.all(correlatedPaths.map(({ filePath, uploadUrl }) => {
        return createScreenshotArtifact(filePath, uploadUrl);
    })).then((artifacts) => {
        return artifacts.filter((artifact) => {
            return !!artifact;
        });
    });
};
exports.createScreenshotArtifactBatch = createScreenshotArtifactBatch;
