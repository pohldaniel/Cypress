"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.composeProtocolErrorReportFromOptions = exports.createProtocolArtifact = void 0;
const tslib_1 = require("tslib");
const promises_1 = tslib_1.__importDefault(require("fs/promises"));
const fs_1 = require("fs");
const artifact_1 = require("./artifact");
const debug_1 = tslib_1.__importDefault(require("debug"));
const debug = (0, debug_1.default)('cypress:server:cloud:artifacts:protocol');
const createProtocolUploadStrategy = (protocolManager) => {
    const strategy = async (filePath, uploadUrl, fileSize) => {
        const fatalError = protocolManager.getFatalError();
        if (fatalError) {
            throw fatalError.error;
        }
        const res = await protocolManager.uploadCaptureArtifact({ uploadUrl, fileSize, filePath });
        return res !== null && res !== void 0 ? res : {};
    };
    return strategy;
};
const createProtocolArtifact = async (filePath, uploadUrl, protocolManager) => {
    let size;
    debug('statting file path', filePath);
    try {
        const stat = await promises_1.default.stat(filePath);
        debug('file stat', stat);
        size = stat.size;
    }
    catch (e) {
        debug('failed to stat protocol artifact filepath: ', e);
        protocolManager.addFatalError('uploadCaptureArtifact', new Error(`File not found: ${filePath}`));
    }
    return size !== undefined ? new artifact_1.Artifact('protocol', filePath, uploadUrl, size, createProtocolUploadStrategy(protocolManager)) : undefined;
};
exports.createProtocolArtifact = createProtocolArtifact;
const composeProtocolErrorReportFromOptions = async ({ protocolManager, protocolCaptureMeta, captureUploadUrl, }) => {
    var _a;
    const url = captureUploadUrl || protocolCaptureMeta.url;
    const pathToFile = protocolManager === null || protocolManager === void 0 ? void 0 : protocolManager.getArchivePath();
    const fileSize = pathToFile && (0, fs_1.existsSync)(pathToFile) ? (_a = (await promises_1.default.stat(pathToFile))) === null || _a === void 0 ? void 0 : _a.size : 0;
    const fatalError = protocolManager === null || protocolManager === void 0 ? void 0 : protocolManager.getFatalError();
    debug('fatalError via composeProtocolErrorReport', fatalError);
    return {
        key: artifact_1.ArtifactKinds.PROTOCOL,
        url: url !== null && url !== void 0 ? url : 'UNKNOWN',
        pathToFile: pathToFile !== null && pathToFile !== void 0 ? pathToFile : 'UNKNOWN',
        fileSize,
        success: false,
        error: (fatalError === null || fatalError === void 0 ? void 0 : fatalError.error.message) || 'UNKNOWN',
        errorStack: (fatalError === null || fatalError === void 0 ? void 0 : fatalError.error.stack) || 'UNKNOWN',
    };
};
exports.composeProtocolErrorReportFromOptions = composeProtocolErrorReportFromOptions;
