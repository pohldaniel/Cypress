"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Automation = void 0;
const tslib_1 = require("tslib");
const bluebird_1 = tslib_1.__importDefault(require("bluebird"));
const uuid_1 = require("uuid");
const cookies_1 = require("./cookies");
const screenshot_1 = require("./screenshot");
const cookies_2 = require("../util/cookies");
const debug_1 = tslib_1.__importDefault(require("debug"));
const automation_not_implemented_1 = require("./automation_not_implemented");
const debug = (0, debug_1.default)('cypress:server:automation');
class Automation {
    constructor(options) {
        this.initializeMiddleware = () => {
            var _a;
            return {
                onPush: ((_a = this.middleware) === null || _a === void 0 ? void 0 : _a.onPush) || null,
                onBeforeRequest: null,
                onRequest: null,
                onResponse: null,
                onAfterResponse: null,
            };
        };
        this.response = (id, resp) => {
            const request = this.requests[id];
            if (request) {
                delete request[id];
                return request(resp);
            }
        };
        this.get = (fn) => {
            return this.middleware[fn];
        };
        this.onBrowserPreRequest = options.onBrowserPreRequest;
        this.onRequestEvent = options.onRequestEvent;
        this.onRemoveBrowserPreRequest = options.onRemoveBrowserPreRequest;
        this.onDownloadLinkClicked = options.onDownloadLinkClicked;
        this.onServiceWorkerRegistrationUpdated = options.onServiceWorkerRegistrationUpdated;
        this.onServiceWorkerVersionUpdated = options.onServiceWorkerVersionUpdated;
        this.onServiceWorkerClientSideRegistrationUpdated = options.onServiceWorkerClientSideRegistrationUpdated;
        this.onServiceWorkerClientEvent = options.onServiceWorkerClientEvent;
        this.requests = {};
        // set the middleware
        this.middleware = this.initializeMiddleware();
        this.cookies = new cookies_1.Cookies(options.cyNamespace, options.cookieNamespace);
        this.screenshot = (0, screenshot_1.Screenshot)(options.screenshotsFolder);
    }
    reset() {
        this.middleware = this.initializeMiddleware();
    }
    automationValve(message, fn) {
        return (msg, data) => {
            const resolvedData = data !== null && data !== void 0 ? data : msg;
            const resolvedMessage = data ? msg : message;
            const onReq = this.get('onRequest');
            if (onReq) {
                debug('Middleware `onRequest` fn found, attempting middleware exec for message: %s', message);
                return bluebird_1.default.try(() => {
                    return onReq(resolvedMessage, resolvedData);
                }).catch((e) => {
                    if (automation_not_implemented_1.AutomationNotImplemented.isAutomationNotImplementedErr(e)) {
                        return this.requestAutomationResponse(resolvedMessage, resolvedData, fn);
                    }
                    throw e;
                });
            }
            return this.requestAutomationResponse(resolvedMessage, resolvedData, fn);
        };
    }
    requestAutomationResponse(message, data, fn) {
        return new bluebird_1.default((resolve, reject) => {
            const id = (0, uuid_1.v4)();
            this.requests[id] = function (obj) {
                // normalize the error from automation responses
                const e = obj.__error;
                if (e) {
                    const err = new Error(e);
                    err.name = obj.__name;
                    err.stack = obj.__stack;
                    return reject(err);
                }
                // normalize the response
                return resolve(obj.response);
            };
            // callback onAutomate with the right args
            return fn(message, data, id);
        });
    }
    async invokeAsync(fn, ...args) {
        const invocationTarget = this.get(fn);
        if (invocationTarget) {
            try {
                return await invocationTarget(...args);
            }
            catch (err) {
                debug('invokeAsync on %s failed: %s', fn, err);
            }
        }
    }
    normalize(message, data, automate) {
        return bluebird_1.default.try(() => {
            switch (message) {
                case 'take:screenshot':
                    return this.screenshot.capture(data, automate);
                case 'get:cookies':
                    return this.cookies.getCookies(data, automate);
                case 'get:cookie':
                    return this.cookies.getCookie(data, automate);
                case 'set:cookie':
                    return this.cookies.setCookie(data, automate);
                case 'set:cookies':
                    return this.cookies.setCookies(data, automate);
                case 'add:cookies':
                    return this.cookies.addCookies(data, automate);
                case 'clear:cookies':
                    return bluebird_1.default.all([
                        this.cookies.clearCookies(data, automate),
                        cookies_2.cookieJar.removeAllCookies(),
                    ])
                        .spread((automationResult) => automationResult);
                case 'clear:cookie':
                    return bluebird_1.default.all([
                        this.cookies.clearCookie(data, automate),
                        cookies_2.cookieJar.removeCookie(data),
                    ])
                        .spread((automationResult) => automationResult);
                case 'change:cookie':
                    return this.cookies.changeCookie(data);
                case 'create:download':
                case 'canceled:download':
                case 'complete:download':
                    return data;
                default:
                    return automate(data);
            }
        });
    }
    getRequests() {
        return this.requests;
    }
    getMiddleware() {
        return this.middleware;
    }
    use(middlewares) {
        debug('installing middleware');
        return this.middleware = {
            ...this.middleware,
            ...middlewares,
        };
    }
    async push(message, data) {
        debug('push `%s`: %o', message, data);
        const result = await this.normalize(message, data);
        if (result) {
            await this.invokeAsync('onPush', message, result);
        }
    }
    async request(message, data, fn) {
        // curry in the message + callback function
        // for obtaining the external automation data
        debug('request: `%s`', message);
        const automate = this.automationValve(message, fn);
        await this.invokeAsync('onBeforeRequest', message, data);
        const resp = await this.normalize(message, data, automate);
        await this.invokeAsync('onAfterResponse', message, data, resp);
        return resp;
    }
}
exports.Automation = Automation;
