"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cache = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const bluebird_1 = tslib_1.__importDefault(require("bluebird"));
const data_context_1 = require("../../data-context");
const fs_1 = require("./util/fs");
const app_data_1 = tslib_1.__importDefault(require("./util/app_data"));
const file_1 = tslib_1.__importDefault(require("./util/file"));
const fileUtil = new file_1.default({
    path: app_data_1.default.path('cache'),
});
data_context_1.globalPubSub.on('test:cleanup', () => {
    fileUtil.__resetForTest();
});
exports.cache = {
    path: fileUtil.path,
    defaults() {
        return {
            USER: {
                authToken: '',
                name: '',
                email: '',
            },
            PROJECTS: [],
            PROJECT_PREFERENCES: {},
            PROJECTS_CONFIG: {},
            COHORTS: {},
        };
    },
    _read() {
        return fileUtil.get().then((contents) => {
            return lodash_1.default.defaults(contents, this.defaults());
        });
    },
    _getProjects(tx) {
        return tx.get('PROJECTS', []);
    },
    _removeProjects(tx, projects, paths) {
        const pathsArray = Array.isArray(paths) ? paths : [paths];
        projects = lodash_1.default.without(projects, ...pathsArray);
        return tx.set({ PROJECTS: projects });
    },
    getProjectRoots() {
        return fileUtil.transaction((tx) => {
            return this._getProjects(tx).then((projects) => {
                const pathsToRemove = bluebird_1.default.reduce(projects, (memo, path) => {
                    return fs_1.fs.statAsync(path)
                        .catch(() => {
                        memo.push(path);
                        return memo;
                    }).return(memo);
                }, []);
                return pathsToRemove.then((removedPaths) => {
                    return this._removeProjects(tx, projects, removedPaths);
                }).then(() => {
                    return this._getProjects(tx);
                });
            });
        });
    },
    removeProject(path) {
        return fileUtil.transaction((tx) => {
            return this._getProjects(tx).then((projects) => {
                return this._removeProjects(tx, projects, path);
            });
        });
    },
    insertProject(path) {
        return fileUtil.transaction((tx) => {
            return this._getProjects(tx).then((projects) => {
                // projects are sorted by most recently used, so add a project to
                // the start or move it to the start if it already exists
                const existingIndex = lodash_1.default.findIndex(projects, (project) => {
                    return project === path;
                });
                if (existingIndex > -1) {
                    projects.splice(existingIndex, 1);
                }
                projects.unshift(path);
                return tx.set('PROJECTS', projects);
            });
        });
    },
    getUser() {
        return fileUtil.get('USER', {});
    },
    setUser(user) {
        return fileUtil.set({ USER: user });
    },
    removeUser() {
        return fileUtil.set({ USER: {} });
    },
    removeLatestProjects() {
        return fileUtil.set({ PROJECTS: [] });
    },
    getProjectPreferences() {
        return fileUtil.get('PROJECT_PREFERENCES', {});
    },
    insertProjectPreferences(projectTitle, projectPreferences) {
        return fileUtil.transaction((tx) => {
            return tx.get('PROJECT_PREFERENCES', {}).then((preferences) => {
                return tx.set('PROJECT_PREFERENCES', {
                    ...preferences,
                    [projectTitle]: {
                        ...preferences[projectTitle],
                        ...projectPreferences,
                    },
                });
            });
        });
    },
    removeAllProjectPreferences() {
        return fileUtil.set({ PROJECT_PREFERENCES: {} });
    },
    removeProjectPreferences(projectTitle) {
        const preferences = fileUtil.get('PROJECT_PREFERENCES', {});
        const updatedPreferences = {
            ...preferences.PROJECT_PREFERENCES,
            [projectTitle]: null,
        };
        return fileUtil.set({ PROJECT_PREFERENCES: updatedPreferences });
    },
    getCohorts() {
        return fileUtil.get('COHORTS', {}).then((cohorts) => {
            Object.keys(cohorts).forEach((key) => {
                cohorts[key].name = key;
            });
            return cohorts;
        });
    },
    insertCohort(cohort) {
        return fileUtil.transaction((tx) => {
            return tx.get('COHORTS', {}).then((cohorts) => {
                return tx.set('COHORTS', {
                    ...cohorts,
                    [cohort.name]: {
                        cohort: cohort.cohort,
                    },
                });
            });
        });
    },
    remove() {
        return fileUtil.remove();
    },
    // for testing purposes
    __get: fileUtil.get.bind(fileUtil),
};
