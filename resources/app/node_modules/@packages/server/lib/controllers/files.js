"use strict";
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const path_1 = tslib_1.__importDefault(require("path"));
const cwd_1 = tslib_1.__importDefault(require("../cwd"));
const debug_1 = tslib_1.__importDefault(require("debug"));
const escape_filename_1 = require("../util/escape_filename");
const data_context_1 = require("../../../data-context");
const document_domain_injection_1 = require("../../../network/lib/document-domain-injection");
const privileged_commands_manager_1 = require("../privileged-commands/privileged-commands-manager");
const debug = (0, debug_1.default)('cypress:server:controllers');
module.exports = {
    async handleIframe(req, res, config, remoteStates, extraOptions) {
        const test = req.params[0];
        const iframePath = (0, cwd_1.default)('lib', 'html', 'iframe.html');
        const specFilter = lodash_1.default.get(extraOptions, 'specFilter');
        debug('handle iframe %o', { test, specFilter, config });
        const specs = await this.getSpecs(test, config, extraOptions);
        const supportFileJs = this.getSupportFile(config);
        const allFilesToSend = specs;
        if (supportFileJs) {
            allFilesToSend.unshift(supportFileJs);
        }
        debug('all files to send %o', lodash_1.default.map(allFilesToSend, 'relative'));
        const injection = document_domain_injection_1.DocumentDomainInjection.InjectionBehavior(config);
        debug('primary remote state', remoteStates.getPrimary());
        const { origin } = remoteStates.getPrimary();
        const superDomain = injection.shouldInjectDocumentDomain(origin) ? injection.getHostname(origin) : '';
        const privilegedChannel = await privileged_commands_manager_1.privilegedCommandsManager.getPrivilegedChannel({
            browserFamily: req.query.browserFamily,
            isSpecBridge: false,
            namespace: config.namespace,
            scripts: allFilesToSend,
            url: req.proxiedUrl,
            documentDomainContext: injection.shouldInjectDocumentDomain(origin),
        });
        const iframeOptions = {
            superDomain,
            title: this.getTitle(test),
            scripts: JSON.stringify(allFilesToSend),
            privilegedChannel,
        };
        debug('iframe %s options %o', test, iframeOptions);
        res.render(iframePath, iframeOptions);
    },
    async handleCrossOriginIframe(req, res, config) {
        const iframePath = (0, cwd_1.default)('lib', 'html', 'spec-bridge-iframe.html');
        const documentDomainInjection = document_domain_injection_1.DocumentDomainInjection.InjectionBehavior(config);
        const superDomain = documentDomainInjection.shouldInjectDocumentDomain(req.proxiedUrl) ?
            documentDomainInjection.getHostname(req.proxiedUrl) :
            undefined;
        const { origin } = new URL(req.proxiedUrl);
        const privilegedChannel = await privileged_commands_manager_1.privilegedCommandsManager.getPrivilegedChannel({
            browserFamily: req.query.browserFamily,
            isSpecBridge: true,
            namespace: config.namespace,
            scripts: [],
            url: req.proxiedUrl,
            documentDomainContext: documentDomainInjection.shouldInjectDocumentDomain(req.proxiedUrl),
        });
        const iframeOptions = {
            superDomain,
            title: `Cypress for ${origin}`,
            namespace: config.namespace,
            privilegedChannel,
        };
        debug('cross origin iframe with options %o', iframeOptions);
        res.render(iframePath, iframeOptions);
    },
    getSpecs(spec, config, extraOptions = {}) {
        // when asking for all specs: spec = "__all"
        // otherwise it is a relative spec filename like "integration/spec.js"
        debug('get specs %o', { spec, extraOptions });
        const convertSpecPath = (spec) => {
            // get the absolute path to this spec and
            // get the browser url + cache buster
            const convertedSpec = path_1.default.join(config.projectRoot, spec);
            debug('converted %s to %s', spec, convertedSpec);
            return this.prepareForBrowser(convertedSpec, config.projectRoot, config.namespace);
        };
        const getSpecsHelper = async () => {
            // grab all of the specs if this is ci
            if (spec === '__all') {
                debug('returning all specs');
                const ctx = (0, data_context_1.getCtx)();
                // In case the user clicked "run all specs" and deleted a spec in the list, we will
                // only include specs we know to exist
                const existingSpecs = new Set(ctx.project.specs.map(({ relative }) => relative));
                const filteredSpecs = ctx.project.runAllSpecs.reduce((acc, relSpec) => {
                    if (existingSpecs.has(relSpec)) {
                        acc.push(convertSpecPath(relSpec));
                    }
                    return acc;
                }, []);
                return filteredSpecs;
            }
            debug('normalizing spec %o', { spec });
            // normalize by sending in an array of 1
            return [convertSpecPath(spec)];
        };
        return getSpecsHelper();
    },
    prepareForBrowser(filePath, projectRoot, namespace) {
        const SPEC_URL_PREFIX = `/${namespace}/tests?p`;
        filePath = filePath.replace(SPEC_URL_PREFIX, '__CYPRESS_SPEC_URL_PREFIX__');
        filePath = (0, escape_filename_1.escapeFilenameInUrl)(filePath).replace('__CYPRESS_SPEC_URL_PREFIX__', SPEC_URL_PREFIX);
        const relativeFilePath = path_1.default.relative(projectRoot, filePath);
        return {
            absolute: filePath,
            relative: relativeFilePath,
            relativeUrl: this.getTestUrl(relativeFilePath, namespace),
        };
    },
    getTestUrl(file, namespace) {
        const url = `/${namespace}/tests?p=${file}`;
        debug('test url for file %o', { file, url });
        return url;
    },
    getTitle(test) {
        if (test === '__all') {
            return 'All Tests';
        }
        return test;
    },
    getSupportFile(config) {
        const { projectRoot, supportFile, namespace } = config;
        if (!supportFile) {
            return;
        }
        return this.prepareForBrowser(supportFile, projectRoot, namespace);
    },
};
